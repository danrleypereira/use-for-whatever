# GitLab CI configuration for a React TypeScript project using pnpm

# Define stages
stages:
  - setup
  - lint
  - test
  - build
  - deploy

# Default settings
default:
  image: node:18-alpine

# Cache configuration
cache:
  key:
    files:
      - pnpm-lock.yaml
  paths:
    - .pnpm-store
    - node_modules/

# Variables
variables:
  PNPM_CACHE_FOLDER: .pnpm-store
  HUSKY: 0  # Disable Husky hooks in CI

# Install and setup dependencies
setup:
  stage: setup
  before_script:
    - apk add --no-cache git
    - npm install -g pnpm@latest
    - pnpm config set store-dir $PNPM_CACHE_FOLDER
  script:
    - pnpm install --frozen-lockfile
  artifacts:
    paths:
      - node_modules/
    expire_in: 1 hour
  cache:
    policy: pull-push

# Lint the code
lint:
  stage: lint
  needs: [setup]
  script:
    - pnpm lint
    - pnpm format:check
  cache:
    policy: pull

# TypeScript type checking
typecheck:
  stage: lint
  needs: [setup]
  script:
    - pnpm typecheck
  cache:
    policy: pull

# Run tests
test:
  stage: test
  needs: [setup]
  script:
    - echo "Running tests..."
    # Uncomment when tests are available
    # - pnpm test
  cache:
    policy: pull

# Build the application
build:
  stage: build
  needs: [lint, typecheck, test]
  script:
    - pnpm build
  artifacts:
    paths:
      - build/
    expire_in: 1 week
  cache:
    policy: pull
  only:
    - main
    - master
    - production
    - staging
    - develop

# Deploy to staging
deploy_staging:
  stage: deploy
  needs: [build]
  script:
    - echo "Deploying to staging environment..."
    # Add your deployment script here
  environment:
    name: staging
  only:
    - develop
    - staging
  when: manual

# Deploy to production
deploy_production:
  stage: deploy
  needs: [build]
  script:
    - echo "Deploying to production environment..."
    # Add your deployment script here
  environment:
    name: production
  only:
    - main
    - master
    - production
  when: manual

# Clean up old artifacts (cron job)
cleanup:
  stage: .post
  script:
    - echo "Cleaning up old artifacts and pipelines"
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
  when: always